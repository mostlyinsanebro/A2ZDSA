Problem Link:-
https://www.codingninjas.com/studio/problems/k-most-occurrent-numbers_625382?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTab=1


Approach:-
We will first store the first element of array in the ans[] array whose 0th index rep. max value and 1st index rep. min value. Now, we will
traverse the hashmap and check whether the occurence of an element is >= arr[0] ( max value) . If yes, then replace the 0th index with that key.
If the value i.e. occurence is == occurence(min value), then check if the key is smaller than the min value . if yes, the replacethe min valyue with key
because we want to get the minimum element with highest occurence.

Same approach goes for max value.

Solution:-
import java.util.*;
public class Solution {
    public static int[] getFrequencies(int []v) {
        // Write Your Code Here
        

        return getFreq(v);
        
    }


    public static int[] getFreq(int arr[])
    {
        HashMap<Integer,Integer> map= new HashMap<>();
        for(int i=0;i<arr.length;i++)
        {
            map.put(arr[i],map.getOrDefault(arr[i],0)+1);
        }
        int ans[]= new int[2];
        // min value
       // int minfreq = 0;
       // int maxfreq = 0;
        ans[1] = arr[0];

        // max value
        ans[0] = arr[0];
        map.forEach((key,val) -> {
         if(map.get(ans[0]) <= val)
         {
             if(map.get(ans[0])< val)
             {
                 ans[0]= key;
             }
             if(map.get(ans[0]) == val)
             {
            if(key < ans[0])
             ans[0] = key;
             }
         }
         if(map.get(ans[1]) >= val)
         {
            if(map.get(ans[1])> val)
             {
                 ans[1]= key;
             }
             if(map.get(ans[1]) == val)
             {
            if(key < ans[1])
             ans[1] = key;
             }
            
         }
        
        }
        );

        
       // ans[0]=hfe;

        
        return ans;
        
    }
}
